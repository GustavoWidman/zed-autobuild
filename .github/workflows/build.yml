name: Build and Cache Zed

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch:

concurrency:
  group: build-zed
  cancel-in-progress: false

jobs:
  check-new-release:
    name: Check for new Zed release
    runs-on: ubuntu-24.04
    outputs:
      has_new_release: ${{ steps.check.outputs.has_new_release }}
      new_tag: ${{ steps.check.outputs.new_tag }}
      current_tag: ${{ steps.check.outputs.current_tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Check for new release
        id: check
        run: |
          # Get current tag from .current file
          CURRENT_TAG=$(cat .current || echo "v0.0.0")
          echo "Current tag: $CURRENT_TAG"
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT

          # Get latest Zed release tag
          LATEST_TAG=$(curl -s https://api.github.com/repos/zed-industries/zed/releases | jq -r '.[0].tag_name')
          echo "Latest tag: $LATEST_TAG"
          echo "new_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Compare
          if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
            echo "New release found: $LATEST_TAG"
            echo "has_new_release=true" >> $GITHUB_OUTPUT
          else
            echo "No new release"
            echo "has_new_release=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build ${{ matrix.system }}
    needs: [check-new-release]
    if: needs.check-new-release.outputs.has_new_release == 'true'
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - system: x86_64-linux
            runner: ubuntu-24.04
          - system: aarch64-linux
            runner: ubuntu-24.04-arm
          - system: x86_64-darwin
            runner: macos-15-intel
          - system: aarch64-darwin
            runner: macos-15
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Free up disk space
        if: matrix.system == 'x86_64-linux'
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo docker builder prune -a
      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org https://cache.garnix.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs= cache.garnix.io:CTFPyKSLcx5RMJKfLo5EEPUObbA78b0YQ2DTCJXqr9g=
            cores = 0
      - uses: cachix/cachix-action@v15
        with:
          name: r3dlust
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
          skipPush: true
      - uses: DeterminateSystems/magic-nix-cache-action@main

      - name: Update files
        run: |
          NEW_TAG="${{ needs.check-new-release.outputs.new_tag }}"

          # Update .current
          echo "$NEW_TAG" > .current

          # Update flake.nix
          perl -i -pe "s|zed\.url = \"github:zed-industries/zed/.*\"|zed.url = \"github:zed-industries/zed/$NEW_TAG\"|g" flake.nix

          # Update flake.lock
          nix flake update zed

      - name: Build Zed for ${{ matrix.system }}
        run: |
          echo "BUILDING $(cat .current)"
          nix build .#default -L

      - name: Push to Cachix
        run: |
          # Get the store path
          STORE_PATH=$(nix eval --raw .#packages.${{ matrix.system }}.default.outPath 2>/dev/null || nix eval --raw .#default.outPath)
          echo "Pushing to Cachix: $STORE_PATH"

          # Push to cachix with all dependencies
          nix path-info --recursive "$STORE_PATH" | cachix push r3dlust

  update-current-tag:
    name: Update .current file
    needs: [check-new-release, build-and-push]
    permissions:
      contents: write
    if: needs.check-new-release.outputs.has_new_release == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v26

      - name: Update files
        run: |
          NEW_TAG="${{ needs.check-new-release.outputs.new_tag }}"

          # Update .current
          echo "$NEW_TAG" > .current

          # Update flake.nix
          perl -i -pe "s|zed\.url = \"github:zed-industries/zed/.*\"|zed.url = \"github:zed-industries/zed/$NEW_TAG\"|g" flake.nix

          # Update flake.lock
          nix flake update zed

      - name: Commit and push changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add .current flake.nix flake.lock
          git commit -m "chore: update to ${{ needs.check-new-release.outputs.new_tag }}"
          git push
